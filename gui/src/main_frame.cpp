#include "main_frame.h"

namespace readimages {
namespace gui{

double golden = 0.618;

MainFrame::MainFrame(const TGWindow* window, unsigned int width, unsigned int height):
    TGMainFrame(window, width, height),
    table_(this, width, height),
    table_layout_(&table_, 2, 2),
    layout_hints_(kLHintsTop | kLHintsLeft |
            kLHintsExpandX | kLHintsExpandY),
    table_layout_hints_(3),
    embedded_canvas_("image_embedded_canvas",
            &table_,
            static_cast<unsigned int>(width * golden),
            height),
    projection_canvas_("projection_canvas",
            &table_,
            static_cast<unsigned int>(width * (1 - golden)),
            height / 2),
    transform_canvas_("transform_canvas",
            &table_,
            static_cast<unsigned int>(width * (1 - golden)),
            height / 2),
    image_reader_(new BaseImageReader());
{
    table_.SetLayoutManager(&table_layout_);
    AddFrame(&table_, &layout_hints_);


    //set main canvas in table
    table_layout_hints_.push_back(new TGTableLayoutHints(
                0, 1, 0, 2,
                kLHintsExpandX | kLHintsExpandY |
                kLHintsShrinkX | kLHintsShrinkY |
                kLHintsFillX | kLHintsFillY));
    table_.AddFrame(&embedded_canvas_, &table_layout_hints_[0]);

    //set projection and transform_canvas in table
    table_layout_hints_.push_back(new TGTableLayoutHints(
                1, 2, 0, 1,
                kLHintsExpandX | kLHintsExpandY |
                kLHintsShrinkX | kLHintsShrinkY |
                kLHintsFillX | kLHintsFillY));
    table_.AddFrame(&projection_canvas_, &table_layout_hints_[1]);
    table_layout_hints_.push_back(new TGTableLayoutHints(
                1, 2, 1, 2,
                kLHintsExpandX | kLHintsExpandY |
                kLHintsShrinkX | kLHintsShrinkY |
                kLHintsFillX | kLHintsFillY));
    table_.AddFrame(&transform_canvas_, &table_layout_hints_[2]);

    table_.Layout();
    MapSubwindows();
    Layout();
    MapWindow();

}

void MainFrame::CloseWindow() {
    // Got close message for this MainFrame. Calls parent CloseWindow()
    // (which destroys the window) and terminate the application.
    // The close message is generated by the window manager when its close
    // window menu item is selected.

    std::cout << "App closing!" << std::endl;
    //
    // you'd better close files here
    //
    TGMainFrame::CloseWindow();
    gApplication->Terminate(0);
}

}
}
