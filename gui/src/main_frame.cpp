#include "main_frame.h"

namespace readimages {
namespace gui{

double horizontal_separation_fraction = 0.618;

MainFrame::MainFrame(const TGWindow* window, unsigned int width, unsigned int height):
    TGMainFrame(window, width, height),
    table_(this, width, height),
    table_layout_(&table_, 2, 2),
    layout_hints_(kLHintsTop | kLHintsLeft |
            kLHintsExpandX | kLHintsExpandY),
    menu_bar_(this, 1, 1, kHorizontalFrame),
    menu_bar_layout_(kLHintsTop | kLHintsLeft | kLHintsExpandX, 0, 0, 1, 1),
    menu_bar_item_layout_(kLHintsTop | kLHintsLeft, 0, 4, 0, 0),
    menu_bar_help_layout_(kLHintsTop | kLHintsRight),
    table_layout_hints_(3),
    embedded_canvas_("image_embedded_canvas",
            &table_,
            static_cast<unsigned int>(width * horizontal_separation_fraction),
            height),
    projection_canvas_("projection_canvas",
            &table_,
            static_cast<unsigned int>(width * (1 - horizontal_separation_fraction)),
            height / 2),
    transform_canvas_("transform_canvas",
            &table_,
            static_cast<unsigned int>(width * (1 - horizontal_separation_fraction)),
            height / 2),
    transform_histogram_(0),
    style_(setTDRStyle())
{
    //set menus
    AddFrame(&menu_bar_, &menu_bar_layout_);
    menu_bar_.AddPopup("&File", &file_menu_, &menu_bar_item_layout_);
    file_menu_.Associate(this);
    file_menu_.AddEntry("&Open...", M_FILE_OPEN);
    file_menu_.AddEntry("&Close", M_FILE_CLOSE);
    menu_bar_.AddPopup("&View", &view_menu_, &menu_bar_item_layout_);
    view_menu_.Associate(this);
    view_menu_.AddEntry("&Adjust contrast/brightness...", M_CONTRAST);

    //set table
    table_.SetLayoutManager(&table_layout_);
    AddFrame(&table_, &layout_hints_);

    //set main canvas in table
    table_layout_hints_.push_back(new TGTableLayoutHints(
                0, 1, 0, 2,
                kLHintsExpandX | kLHintsExpandY |
                kLHintsShrinkX | kLHintsShrinkY |
                kLHintsFillX | kLHintsFillY));
    table_.AddFrame(&embedded_canvas_, &table_layout_hints_[0]);

    //set projection and transform_canvas in table
    table_layout_hints_.push_back(new TGTableLayoutHints(
                1, 2, 0, 1,
                kLHintsExpandX | kLHintsExpandY |
                kLHintsShrinkX | kLHintsShrinkY |
                kLHintsFillX | kLHintsFillY));
    table_.AddFrame(&projection_canvas_, &table_layout_hints_[1]);
    table_layout_hints_.push_back(new TGTableLayoutHints(
                1, 2, 1, 2,
                kLHintsExpandX | kLHintsExpandY |
                kLHintsShrinkX | kLHintsShrinkY |
                kLHintsFillX | kLHintsFillY));
    table_.AddFrame(&transform_canvas_, &table_layout_hints_[2]);

    gROOT->SetStyle("tdrStyle");
    gROOT->ForceStyle();

    transform_canvas_.GetCanvas()->SetLogy();
    table_.Layout();
    MapSubwindows();
    Layout();
    MapWindow();

}

void MainFrame::CloseWindow() {
    // Got close message for this MainFrame. Calls parent CloseWindow()
    // (which destroys the window) and terminate the application.
    // The close message is generated by the window manager when its close
    // window menu item is selected.

    std::cout << "App closing, bye!" << std::endl;
    //
    // you'd better close files here
    //
    TGMainFrame::CloseWindow();
    gApplication->Terminate(0);
}

bool MainFrame::ProcessMessage(long message, long par1, long par2) {
    switch (GET_MSG(message)) {

        case kC_COMMAND:
            switch (GET_SUBMSG(message)) {

                case kCM_MENUSELECT:
                    break;

                case kCM_MENU:
                    //std::cout << "menu pressed " << par1 << "\n" ;
                    switch (par1) {

                        case M_FILE_OPEN:
                            OpenFile();
                            break;

                        case M_FILE_CLOSE:
                            CloseWindow();
                            break;

                        case M_CONTRAST:
                            SpawnContrastAdjustment();
                            break;

                        default:
                            std::cout << "Menu " << par1 << " not programmed\n" ;
                            break;
                    } //end of switch(par1)
            } //end of switch (GET_SUBMSG(message))
            break;
        default:
            break;
    } //end of switch (GET_MSG(message))
    return true;
}

void MainFrame::OpenFile() {
    const char *filetypes[] = {"RAW images", "*.raw", 0, 0};
    file_info_.fFileTypes = filetypes;
    file_info_.fIniDir = StrDup(".");
    //lock mutex to prevent the newest image reader from looking into folders
    //while browsing the Dialog
    if (image_reader_)
        image_reader_->mutex_.lock();
    //automatically calls delete when the window is closed, according to http://root.cern.ch/phpBB3/viewtopic.php?p=69013#p69013
    dialog_ = new TGFileDialog(gClient->GetRoot(), this, kFDOpen, &file_info_);
    if (image_reader_)
        image_reader_->mutex_.unlock();
    //start in new detached thread if necessary
    if (file_info_.fFilename) {
        boost::thread main_thread(&MainFrame::LaunchImageReader, this, file_info_.fFilename);
        main_thread.detach();      
    }
}

void MainFrame::LaunchImageReader(fs::path path) {
    //never returns! start in new thread!
    if (not fs::exists(path))
        return;
    else if (fs::is_directory(path)) 
        image_reader_.reset(new NewestImageReader());
    else if (fs::is_regular_file(path))
        image_reader_.reset(new SingleImageReader());
    //with this version, it is not possible to stop the threads without
    //closing the app. Therefore, in order to switch the behaviour from
    //"online viewer" to "single viewer" you have to restart it.

    boost::thread file_lookup_thread(&readimages::BaseImageReader::set_path, image_reader_.get(), path);
    file_lookup_thread.detach();
    boost::thread update_histogram_thread(&readimages::BaseImageReader::update_histogram, image_reader_.get());
    update_histogram_thread.detach();
    while (true) {
        boost::mutex::scoped_lock lock(image_reader_->mutex_);
        image_reader_->histogram_drawn_.wait(lock);
        //waiting because sometimes the histogram wasn't ready to be drawn
        boost::this_thread::sleep(boost::posix_time::milliseconds(50));
        DrawImage();
        DrawProjection();
        boost::thread fft_thread(&MainFrame::DrawTransform, this);
    }
}

void MainFrame::DrawImage() {
    embedded_canvas_.GetCanvas()->cd();
    image_reader_->Draw("col");
    DrawHorizontalLine();
    embedded_canvas_.GetCanvas()->Modified();
    embedded_canvas_.GetCanvas()->Update();
}

void MainFrame::DrawHorizontalLine() {
    embedded_canvas_.GetCanvas()->cd();
    horizontal_line_.reset(new HorizontalLine(image_reader_->get_histogram_x_min(), 10, image_reader_->get_histogram_x_max(), 10));
    horizontal_line_->Draw();
    embedded_canvas_.GetCanvas()->Modified();
    embedded_canvas_.GetCanvas()->Update();
}

void MainFrame::DrawProjection(int pixel) {
    projection_canvas_.GetCanvas()->cd();
    int user_coordinate_pixel = image_reader_->get_histogram().GetYaxis()->GetBinLowEdge(pixel);
    projection_histogram_ = image_reader_->ProjectionX("projection", pixel, pixel);
    std::string new_title = "Along pixel " + boost::lexical_cast<std::string>(user_coordinate_pixel);
    projection_histogram_->SetTitle(new_title.c_str());
    projection_histogram_->Draw();
    projection_canvas_.GetCanvas()->Modified();
    projection_canvas_.GetCanvas()->Update();
}

void MainFrame::DrawTransform() {
    transform_canvas_.GetCanvas()->cd();
    transform_histogram_ = projection_histogram_->FFT(transform_histogram_, "MAG R2C EX");
    transform_histogram_->SetTitle("Fourier transform of projection");
    transform_histogram_->Draw();
    transform_canvas_.GetCanvas()->Modified();
    transform_canvas_.GetCanvas()->Update();
}

void MainFrame::SpawnContrastAdjustment() {
    contrast_adjuster_canvas_.reset(new TCanvas("contrast adjustment", "contrast adjustment", 200, 400));
    contrast_adjuster_.reset(new ContrastAdjuster());
    contrast_adjuster_canvas_->SetWindowPosition(1000, 400);
    contrast_adjuster_->set_parent_canvas(embedded_canvas_.GetCanvas());
    contrast_adjuster_->set_my_canvas(contrast_adjuster_canvas_.get());
    contrast_adjuster_->set_style(&style_);
    contrast_adjuster_->get_intensity_distribution(image_reader_->get_histogram());
    contrast_adjuster_->Draw();
}

}
}
