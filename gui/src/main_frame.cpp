#include "main_frame.h"

namespace readimages {
namespace gui{

double golden = 0.618;

MainFrame::MainFrame(const TGWindow* window, unsigned int width, unsigned int height):
    TGMainFrame(window, width, height),
    table_(this, width, height),
    table_layout_(&table_, 2, 2),
    layout_hints_(kLHintsTop | kLHintsLeft |
            kLHintsExpandX | kLHintsExpandY),
    menu_bar_(this, 1, 1, kHorizontalFrame),
    menu_bar_layout_(kLHintsTop | kLHintsLeft | kLHintsExpandX, 0, 0, 1, 1),
    menu_bar_item_layout_(kLHintsTop | kLHintsLeft, 0, 4, 0, 0),
    menu_bar_help_layout_(kLHintsTop | kLHintsRight),
    file_menu_(this),
    table_layout_hints_(3),
    embedded_canvas_("image_embedded_canvas",
            &table_,
            static_cast<unsigned int>(width * golden),
            height),
    projection_canvas_("projection_canvas",
            &table_,
            static_cast<unsigned int>(width * (1 - golden)),
            height / 2),
    transform_canvas_("transform_canvas",
            &table_,
            static_cast<unsigned int>(width * (1 - golden)),
            height / 2)
{
    //set menus
    file_menu_.Associate(this);
    AddFrame(&menu_bar_, &menu_bar_layout_);
    menu_bar_.AddPopup("&File", &file_menu_, &menu_bar_item_layout_);
    file_menu_.AddEntry("&Open...", M_FILE_OPEN);
    file_menu_.AddEntry("&Close", M_FILE_CLOSE);

    //set table
    table_.SetLayoutManager(&table_layout_);
    AddFrame(&table_, &layout_hints_);

    //set main canvas in table
    table_layout_hints_.push_back(new TGTableLayoutHints(
                0, 1, 0, 2,
                kLHintsExpandX | kLHintsExpandY |
                kLHintsShrinkX | kLHintsShrinkY |
                kLHintsFillX | kLHintsFillY));
    table_.AddFrame(&embedded_canvas_, &table_layout_hints_[0]);

    //set projection and transform_canvas in table
    table_layout_hints_.push_back(new TGTableLayoutHints(
                1, 2, 0, 1,
                kLHintsExpandX | kLHintsExpandY |
                kLHintsShrinkX | kLHintsShrinkY |
                kLHintsFillX | kLHintsFillY));
    table_.AddFrame(&projection_canvas_, &table_layout_hints_[1]);
    table_layout_hints_.push_back(new TGTableLayoutHints(
                1, 2, 1, 2,
                kLHintsExpandX | kLHintsExpandY |
                kLHintsShrinkX | kLHintsShrinkY |
                kLHintsFillX | kLHintsFillY));
    table_.AddFrame(&transform_canvas_, &table_layout_hints_[2]);

    table_.Layout();
    MapSubwindows();
    Layout();
    MapWindow();

}

void MainFrame::CloseWindow() {
    // Got close message for this MainFrame. Calls parent CloseWindow()
    // (which destroys the window) and terminate the application.
    // The close message is generated by the window manager when its close
    // window menu item is selected.

    std::cout << "App closing!" << std::endl;
    //
    // you'd better close files here
    //
    TGMainFrame::CloseWindow();
    gApplication->Terminate(0);
}

bool MainFrame::ProcessMessage(long message, long par1, long par2) {
    switch (GET_MSG(message)) {

        case kC_COMMAND:
            switch (GET_SUBMSG(message)) {

                case kCM_MENUSELECT:
                    break;

                case kCM_MENU:
                    std::cout << "menu pressed " << par1 << "\n" ;
                    switch (par1) {

                        case M_FILE_OPEN:
                            OpenFile();
                            std::cout << file_info_.fFilename << std::endl;
                            break;

                        case M_FILE_CLOSE:
                            CloseWindow();
                            break;

                        default:
                            std::cout << "Menu " << par1 << " not programmed\n" ;
                            break;
                    }//end of switch(par1)
            }//end of switch (GET_SUBMSG(message))
            break;
        default:
            break;
    }//end of switch (GET_MSG(message))
    return true;
}

void MainFrame::OpenFile() {
    const char *filetypes[] = {"RAW images", "*.raw", 0, 0};
    file_info_.fFileTypes = filetypes;
    file_info_.fIniDir = StrDup(".");
    new TGFileDialog(this, this, kFDOpen, &file_info_);
    std::cout << "returned constructor" << std::endl;
}

void MainFrame::LaunchImageReader(fs::path path) {
    if (not fs::exists(path))
        return;
    else if (fs::is_directory(path)) 
        image_reader_.reset(new NewestImageReader());
    else if (fs::is_regular_file(path))
        image_reader_.reset(new SingleImageReader());
    boost::thread file_lookup_thread(&readimages::BaseImageReader::set_path, image_reader_.get(), path);
    boost::thread update_histogram_thread(&readimages::BaseImageReader::update_histogram, image_reader_.get());
}

}
}
